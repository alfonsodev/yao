package {{.Schema}}

import (
	"database/sql"
	_ "github.com/lib/pq"
	"strings"
)

var {{.Name}}Db *sql.DB

type {{.Name}} struct {
	{{.StructFields}}
}

func (obj *{{.Name}}) Save() (*sql.Rows, error) {
    query := "INSERT INTO {{.Schema}}.{{.Table}} ({{.Keys}}) "
    query += " VALUES({{.Placeholders}}) "

    return {{.Name}}Db.Query(query,
        {{.SaveFields}}
    )
}




func  All{{.Name}}() ([]{{.Name}}, error) {
  var results []{{.Name}}
  query := "SELECT * FROM {{.Schema}}.{{.Table}} "
  rows, err := {{.Name}}Db.Query(query)

  for rows.Next() {
    var u {{.Name}}
    rows.Scan(
      {{.ScanFields}}
    )

    results = append(results, u)
  }

  return results, err
}

func New{{.Name}} (db *sql.DB) {{.Name}} {
  {{.Name}}Db = db
  var model {{.Name}}
  return model 
}

func {{.Name}}Where(field string, condition string, value interface{}) Query {
	q:= Query {
		Schema: "{{.Schema}}",
		Table: strings.ToLower("{{.Name}}"),
	}

	q.Where = Clause{
		Field: field,
		Condition: condition,
		Value: value,
	}

	return q 
}

func {{.Name}}Get(rows *sql.Rows) []Modeler {
	var results []Modeler
	var row {{.Name}} 
	for rows.Next() {
		rows.Scan(StrutToScannable(&row))
		results = append(results, &row)
	}

	return results
}

