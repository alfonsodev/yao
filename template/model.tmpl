package {{.Name}}

import (
	"database/sql"
  "database/sql/driver"
  "fmt"
	_ "github.com/lib/pq"
	"strings"
)

var {{.Name}}Db *sql.DB

type {{.Name}} struct {
{{.StructFields}}
}

func (obj *{{.Name}}) Save() (*sql.Rows, error) {
    query := "INSERT INTO {{.Schema}}.{{.Table}} ({{.Keys}}) "
    query += " VALUES({{.Placeholders}}) "

    return {{.Name}}Db.Query(query,
    {{.SaveFields}}
    )
}




func  All() ([]{{.Name}}, error) {
  var results []{{.Name}}
  query := "SELECT * FROM {{.Schema}}.{{.Table}} "
  rows, err := {{.Name}}Db.Query(query)

  for rows.Next() {
    var u {{.Name}}
    rows.Scan(
      {{.ScanFields}}
    )

    results = append(results, u)
  }

  return results, err
}

func New(db *sql.DB) {{.Name}} {
  {{.Name}}Db = db
  var model {{.Name}}
  return model 
}

func Where(field string, condition string, value interface{}) *Query {
	q:= Query {
		Schema: "{{.Schema}}",
		Table: strings.ToLower("{{.Name}}"),
	}

	q.Where = Clause{
		Field: field,
		Condition: condition,
		Value: value,
	}

	return &q
}

func {{.Name}}Get(rows *sql.Rows) []Modeler {
	var results []Modeler
	var row {{.Name}} 
	for rows.Next() {
		rows.Scan({{.AllFieldsByRef}})
		results = append(results, &row)
	}

	return results
}


type Modeler interface {
  Save() (*sql.Rows, error)
}

type Query struct {
        Schema string
        Table string
        Where Clause
        Clauses []Clause
        Limit int64
}

type Clause struct {
        Field string
        Condition string
        Value interface{}
        Connector string
        Parenthesis string
}

func panicIf(err error) {
  if err != nil {
    panic(err.Error())
  }
}
func getValue(v driver.Valuer) interface{} {
  o, err := v.Value()
  panicIf(err)

  return o
}

func (q *Query) And(field string, condition string, value interface{}) *Query {
        q.Clauses = append(q.Clauses, Clause{
                Field:     field,
                Condition: condition,
                Value:     value,
                Connector: "AND",
        })

        return q
}
func (q *Query) Or(field string, condition string, value interface{}) *Query {

        q.Clauses = append(q.Clauses, Clause{
                Field:     field,
                Condition: condition,
                Value:     value,
                Connector: "OR",
        })

        return q
}

func(q *Query) Get() ([]{{.Name}}, error) {
  var values []interface{}
  sql := "SELECT * FROM " + q.Schema +"." + q.Table + " WHERE "
  // TODO: We are asuming there is always a Where clause
  sql += fmt.Sprintf("%s %s $1", q.Where.Field, q.Where.Condition)
  values = append(values, q.Where.Value)
  for i, v := range q.Clauses {
    if v.Connector != "" {
      sql += " " + v.Connector + " "
    }
    sql += fmt.Sprintf("%s %s $%v", v.Field, v.Condition, i+2)
    values = append(values, v.Value)
  }

  rows, err := UsersDb.Query(sql, values...)
  var results []{{.Name}}
  var row {{.Name}}

  for rows.Next() {
    rows.Scan({{.AllFieldsByRef}})
    results = append(results, row)
  }
 
  return results, err
}
